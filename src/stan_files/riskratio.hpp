/*
    Test is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Test is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Test.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace model_riskratio_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_riskratio");
    reader.add_event(46, 44, "end", "model_riskratio");
    return reader;
}

class model_riskratio
  : public stan::model::model_base_crtp<model_riskratio> {
private:
        int ns;
        std::vector<std::vector<int> > n_pla;
        std::vector<std::vector<int> > n_trt;
        double tau_max;
        double tau2_eta;
public:
    model_riskratio(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_riskratio(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_riskratio_namespace::model_riskratio";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "ns", "int", context__.to_vec());
            ns = int(0);
            vals_i__ = context__.vals_i("ns");
            pos__ = 0;
            ns = vals_i__[pos__++];
            check_greater_or_equal(function__, "ns", ns, 1);

            current_statement_begin__ = 4;
            validate_non_negative_index("n_pla", "ns", ns);
            validate_non_negative_index("n_pla", "2", 2);
            context__.validate_dims("data initialization", "n_pla", "int", context__.to_vec(ns,2));
            n_pla = std::vector<std::vector<int> >(ns, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("n_pla");
            pos__ = 0;
            size_t n_pla_k_0_max__ = ns;
            size_t n_pla_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < n_pla_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < n_pla_k_0_max__; ++k_0__) {
                    n_pla[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t n_pla_i_0_max__ = ns;
            size_t n_pla_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < n_pla_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < n_pla_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "n_pla[i_0__][i_1__]", n_pla[i_0__][i_1__], 0);
                }
            }

            current_statement_begin__ = 5;
            validate_non_negative_index("n_trt", "ns", ns);
            validate_non_negative_index("n_trt", "2", 2);
            context__.validate_dims("data initialization", "n_trt", "int", context__.to_vec(ns,2));
            n_trt = std::vector<std::vector<int> >(ns, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("n_trt");
            pos__ = 0;
            size_t n_trt_k_0_max__ = ns;
            size_t n_trt_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < n_trt_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < n_trt_k_0_max__; ++k_0__) {
                    n_trt[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t n_trt_i_0_max__ = ns;
            size_t n_trt_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < n_trt_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < n_trt_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "n_trt[i_0__][i_1__]", n_trt[i_0__][i_1__], 0);
                }
            }

            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "tau_max", "double", context__.to_vec());
            tau_max = double(0);
            vals_r__ = context__.vals_r("tau_max");
            pos__ = 0;
            tau_max = vals_r__[pos__++];
            check_greater_or_equal(function__, "tau_max", tau_max, 0);

            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "tau2_eta", "double", context__.to_vec());
            tau2_eta = double(0);
            vals_r__ = context__.vals_r("tau2_eta");
            pos__ = 0;
            tau2_eta = vals_r__[pos__++];
            check_greater_or_equal(function__, "tau2_eta", tau2_eta, 0);


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 11;
            validate_non_negative_index("pi_c", "ns", ns);
            num_params_r__ += (1 * ns);
            current_statement_begin__ = 12;
            validate_non_negative_index("eta_i", "ns", ns);
            num_params_r__ += ns;
            current_statement_begin__ = 13;
            num_params_r__ += 1;
            current_statement_begin__ = 14;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_riskratio() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 11;
        if (!(context__.contains_r("pi_c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pi_c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pi_c");
        pos__ = 0U;
        validate_non_negative_index("pi_c", "ns", ns);
        context__.validate_dims("parameter initialization", "pi_c", "double", context__.to_vec(ns));
        std::vector<double> pi_c(ns, double(0));
        size_t pi_c_k_0_max__ = ns;
        for (size_t k_0__ = 0; k_0__ < pi_c_k_0_max__; ++k_0__) {
            pi_c[k_0__] = vals_r__[pos__++];
        }
        size_t pi_c_i_0_max__ = ns;
        for (size_t i_0__ = 0; i_0__ < pi_c_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, pi_c[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pi_c: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 12;
        if (!(context__.contains_r("eta_i")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta_i missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta_i");
        pos__ = 0U;
        validate_non_negative_index("eta_i", "ns", ns);
        context__.validate_dims("parameter initialization", "eta_i", "vector_d", context__.to_vec(ns));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_i(ns);
        size_t eta_i_j_1_max__ = ns;
        for (size_t j_1__ = 0; j_1__ < eta_i_j_1_max__; ++j_1__) {
            eta_i(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta_i);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta_i: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 13;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "eta", "double", context__.to_vec());
        double eta(0);
        eta = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 14;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, tau_max, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 11;
            std::vector<local_scalar_t__> pi_c;
            size_t pi_c_d_0_max__ = ns;
            pi_c.reserve(pi_c_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < pi_c_d_0_max__; ++d_0__) {
                if (jacobian__)
                    pi_c.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    pi_c.push_back(in__.scalar_lub_constrain(0, 1));
            }

            current_statement_begin__ = 12;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_i;
            (void) eta_i;  // dummy to suppress unused var warning
            if (jacobian__)
                eta_i = in__.vector_constrain(ns, lp__);
            else
                eta_i = in__.vector_constrain(ns);

            current_statement_begin__ = 13;
            local_scalar_t__ eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.scalar_constrain(lp__);
            else
                eta = in__.scalar_constrain();

            current_statement_begin__ = 14;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lub_constrain(0, tau_max, lp__);
            else
                tau = in__.scalar_lub_constrain(0, tau_max);

            // transformed parameters
            current_statement_begin__ = 18;
            validate_non_negative_index("pi_t", "ns", ns);
            std::vector<local_scalar_t__> pi_t(ns, local_scalar_t__(0));
            stan::math::initialize(pi_t, DUMMY_VAR__);
            stan::math::fill(pi_t, DUMMY_VAR__);

            current_statement_begin__ = 19;
            local_scalar_t__ tau2;
            (void) tau2;  // dummy to suppress unused var warning
            stan::math::initialize(tau2, DUMMY_VAR__);
            stan::math::fill(tau2, DUMMY_VAR__);

            // transformed parameters block statements
            {
            current_statement_begin__ = 22;
            local_scalar_t__ lpi_c(DUMMY_VAR__);
            (void) lpi_c;  // dummy to suppress unused var warning
            stan::math::initialize(lpi_c, DUMMY_VAR__);
            stan::math::fill(lpi_c, DUMMY_VAR__);


            current_statement_begin__ = 23;
            for (int i = 1; i <= ns; ++i) {

                current_statement_begin__ = 24;
                stan::math::assign(lpi_c, stan::math::log((get_base1(pi_c, i, "pi_c", 1) + 0.0001)));
                current_statement_begin__ = 25;
                stan::model::assign(pi_t, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_gt(stan::math::exp((get_base1(eta_i, i, "eta_i", 1) + lpi_c)), 1) ? stan::math::promote_scalar<local_scalar_t__>(0.9999999) : stan::math::promote_scalar<local_scalar_t__>(stan::math::exp((get_base1(eta_i, i, "eta_i", 1) + lpi_c))) ), 
                            "assigning variable pi_t");
            }
            }
            current_statement_begin__ = 29;
            stan::math::assign(tau2, pow(tau, 2));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 18;
            size_t pi_t_k_0_max__ = ns;
            for (size_t k_0__ = 0; k_0__ < pi_t_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(pi_t[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: pi_t" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pi_t: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t pi_t_i_0_max__ = ns;
            for (size_t i_0__ = 0; i_0__ < pi_t_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pi_t[i_0__]", pi_t[i_0__], 0);
                check_less_or_equal(function__, "pi_t[i_0__]", pi_t[i_0__], 1);
            }

            current_statement_begin__ = 19;
            if (stan::math::is_uninitialized(tau2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: tau2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tau2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "tau2", tau2, 0);


            // model body

            current_statement_begin__ = 33;
            lp_accum__.add(uniform_log<propto__>(pi_c, 0, 1));
            current_statement_begin__ = 34;
            lp_accum__.add(normal_log<propto__>(eta, 0, tau2_eta));
            current_statement_begin__ = 35;
            lp_accum__.add(normal_log<propto__>(eta_i, eta, tau2));
            current_statement_begin__ = 36;
            lp_accum__.add(uniform_log<propto__>(tau, 0, tau_max));
            current_statement_begin__ = 40;
            for (int i = 1; i <= ns; ++i) {

                current_statement_begin__ = 41;
                lp_accum__.add(binomial_log<propto__>(get_base1(get_base1(n_pla, i, "n_pla", 1), 1, "n_pla", 2), get_base1(get_base1(n_pla, i, "n_pla", 1), 2, "n_pla", 2), get_base1(pi_c, i, "pi_c", 1)));
                current_statement_begin__ = 42;
                lp_accum__.add(binomial_log<propto__>(get_base1(get_base1(n_trt, i, "n_trt", 1), 1, "n_trt", 2), get_base1(get_base1(n_trt, i, "n_trt", 1), 2, "n_trt", 2), get_base1(pi_t, i, "pi_t", 1)));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("pi_c");
        names__.push_back("eta_i");
        names__.push_back("eta");
        names__.push_back("tau");
        names__.push_back("pi_t");
        names__.push_back("tau2");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_riskratio_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        std::vector<double> pi_c;
        size_t pi_c_d_0_max__ = ns;
        pi_c.reserve(pi_c_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < pi_c_d_0_max__; ++d_0__) {
            pi_c.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t pi_c_k_0_max__ = ns;
        for (size_t k_0__ = 0; k_0__ < pi_c_k_0_max__; ++k_0__) {
            vars__.push_back(pi_c[k_0__]);
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_i = in__.vector_constrain(ns);
        size_t eta_i_j_1_max__ = ns;
        for (size_t j_1__ = 0; j_1__ < eta_i_j_1_max__; ++j_1__) {
            vars__.push_back(eta_i(j_1__));
        }

        double eta = in__.scalar_constrain();
        vars__.push_back(eta);

        double tau = in__.scalar_lub_constrain(0, tau_max);
        vars__.push_back(tau);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 18;
            validate_non_negative_index("pi_t", "ns", ns);
            std::vector<double> pi_t(ns, double(0));
            stan::math::initialize(pi_t, DUMMY_VAR__);
            stan::math::fill(pi_t, DUMMY_VAR__);

            current_statement_begin__ = 19;
            double tau2;
            (void) tau2;  // dummy to suppress unused var warning
            stan::math::initialize(tau2, DUMMY_VAR__);
            stan::math::fill(tau2, DUMMY_VAR__);

            // do transformed parameters statements
            {
            current_statement_begin__ = 22;
            local_scalar_t__ lpi_c(DUMMY_VAR__);
            (void) lpi_c;  // dummy to suppress unused var warning
            stan::math::initialize(lpi_c, DUMMY_VAR__);
            stan::math::fill(lpi_c, DUMMY_VAR__);


            current_statement_begin__ = 23;
            for (int i = 1; i <= ns; ++i) {

                current_statement_begin__ = 24;
                stan::math::assign(lpi_c, stan::math::log((get_base1(pi_c, i, "pi_c", 1) + 0.0001)));
                current_statement_begin__ = 25;
                stan::model::assign(pi_t, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_gt(stan::math::exp((get_base1(eta_i, i, "eta_i", 1) + lpi_c)), 1) ? stan::math::promote_scalar<local_scalar_t__>(0.9999999) : stan::math::promote_scalar<local_scalar_t__>(stan::math::exp((get_base1(eta_i, i, "eta_i", 1) + lpi_c))) ), 
                            "assigning variable pi_t");
            }
            }
            current_statement_begin__ = 29;
            stan::math::assign(tau2, pow(tau, 2));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 18;
            size_t pi_t_i_0_max__ = ns;
            for (size_t i_0__ = 0; i_0__ < pi_t_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pi_t[i_0__]", pi_t[i_0__], 0);
                check_less_or_equal(function__, "pi_t[i_0__]", pi_t[i_0__], 1);
            }

            current_statement_begin__ = 19;
            check_greater_or_equal(function__, "tau2", tau2, 0);

            // write transformed parameters
            if (include_tparams__) {
                size_t pi_t_k_0_max__ = ns;
                for (size_t k_0__ = 0; k_0__ < pi_t_k_0_max__; ++k_0__) {
                    vars__.push_back(pi_t[k_0__]);
                }
                vars__.push_back(tau2);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "model_riskratio";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t pi_c_k_0_max__ = ns;
        for (size_t k_0__ = 0; k_0__ < pi_c_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pi_c" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_i_j_1_max__ = ns;
        for (size_t j_1__ = 0; j_1__ < eta_i_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_i" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "eta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t pi_t_k_0_max__ = ns;
            for (size_t k_0__ = 0; k_0__ < pi_t_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pi_t" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau2";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t pi_c_k_0_max__ = ns;
        for (size_t k_0__ = 0; k_0__ < pi_c_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pi_c" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_i_j_1_max__ = ns;
        for (size_t j_1__ = 0; j_1__ < eta_i_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_i" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "eta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t pi_t_k_0_max__ = ns;
            for (size_t k_0__ = 0; k_0__ < pi_t_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pi_t" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau2";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef model_riskratio_namespace::model_riskratio stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


#endif
